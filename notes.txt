The logic is to build a flexible bot that will be able to scale given different circumstances. In order to do that we need consider the relative relation with other ship and shipyards. 

In the previous version, I was eliminating moves and then weighting a 5 by 5 grid then adding them together to get a value.
With the new approach that I am taking now, instead of hard coding actions, for given situations the moves will be evaluated
and then the move with the highest value will be chosen.

In this new approach, the weighting is more decentralized and many more scenarios will be considered. There is but one simple
rule in the weightings the values will be used to weight would be between -10 to 10. And other parameters involved in the 
problem will be counted towards the optimal goal.

They are different aspect to this agent:
1. If the shipyards need protection: go through the all of the shipyards surroundings and weight the directions to take 
   in order to save them
2. Automatically avoid my own ships to both avoid collision and distribute throughout the map
3. Distance to a cell, halite in a cell, presence of a ship(it's cargo), presence of a shipyard are the main factors in 
   the decision process which are evaluated differently in various situations.

Try to figure out how does the previous algorithm work so well

# Implement: 
    - it is exhaustive to try to reduce the weights so they won't be chosen, instead manually eliminate moves. 
    - Pass the dir and count the number of repetitions of direction
    - The ShipYardDecision class and use it
    - For better accuracy extend the reach to 10 moves apart
    - *Come up with tags so when being followed to go after halite
    - Regulate conversion since we don't need two yards beside each other
    - Add more moves to agent_a
    - Add all the new stuff then start playing around with them
    - Keep the additions simple for now without exponents
    - Go through all the shipyards and add/subtract given there is an enemy or my  own ships


# Fixes: 
    - There should be an extra stress when a given cell is full of halite
    - Also, the weight for convert should be high
    - Some shipyards don't have either a vertical or horizontal difference so don't add that
    - Also, if there was a (mine) shipyard and ship on a cell don't go there
    - Should not convert where it has a lot of halite
    - One of the reasons I am having trouble is the methods are not consistent and I need to write
    the ShipYardDecision module and also work on the conversion issue.