The logic is to build a flexible bot that will be able to scale given different circumstances. In order to do that
we need consider other 

In the previous version, I was eliminating moves and then weighting a 5 by 5 grid then adding them together to get a value.
With the new approach that I am taking now, instead of hard coding actions, for given situations the moves will be evaluated
and then the move with the highest value will be chosen.

In this new approach, the weighting is more decentralized and many more scenarios will be considered. There is but one simple
rule in the weightings the values will be used to weight would be between -10 to 10. And other parameters involved in the 
problem will be counted towards the optimal goal.

instead of eliminating moves, weight different scenarios and test the weights. Even the mining and converting should be
tested during other scenarios.

# Implement: 
    - A set of testing environments to see how the algorithm would react:
        run a series of command on all of the ships and shipyard to make them
        orient in a certain way.
