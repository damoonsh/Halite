The logic is to build a flexible bot that will be able to scale given different circumstances. In order to do that we need consider the relative relation with other ship and shipyards. 

In the previous version, I was eliminating moves and then weighting a 5 by 5 grid then adding them together to get a value.
With the new approach that I am taking now, instead of hard coding actions, for given situations the moves will be evaluated
and then the move with the highest value will be chosen.

In this new approach, the weighting is more decentralized and many more scenarios will be considered. There is but one simple
rule in the weightings the values will be used to weight would be between -10 to 10. And other parameters involved in the 
problem will be counted towards the optimal goal.

They are different aspect to this agent:
1. If the shipyards need protection: go through the all of the shipyards surroundings and weight the directions to take 
   in order to save them
2. Automatically avoid my own ships to both avoid collision and distribute throughout the map
3. Distance to a cell, halite in a cell, presence of a ship(it's cargo), presence of a shipyard are the main factors in 
   the decision process which are evaluated differently in various situations.

- Take notes and apply them all.

- Why does it run away from enemy ships?
- Why no conversion?
- Low mining rate: The deposit rate was way too high
- Too encouraged to attack enemy shipyards

Note: No need to add the other cell with more than 6 moves for now, let's work on weights then add them

# Implement: 
    - For better accuracy extend the reach to 10 moves apart
    - *Come up with tags so when being followed to go after halite
    - Regulate conversion since we don't need two yards beside each other
    - Add all the new stuff then start playing around with them
    - Keep the additions simple for now without exponents
    - Go through all the shipyards and add/subtract given there is an enemy or my  own ships
    - Increase tendency to deposit as the steps increase


# Fixes: 
    - There should be an extra stress when a given cell is full of halite
    - Also, the weight for convert should be high
    - Some shipyards don't have either a vertical or horizontal difference so don't add that
    - Also, if there was a (mine) shipyard and ship on a cell don't go there
    - Should not convert where it has a lot of halite
    - One of the reasons I am having trouble is the methods are not consistent and I need to write
    the ShipYardDecision module and also work on the conversion issue.
    - Make the ships get far from the shipyard at the beginning steps so they would convert.
    - Easily crashes with other ships  
    - The decision to attack an enemy shipyard is dependent on how close it is to the my shipyard
    - avoid_collision should focus on distributing the  ships
    - Maybe keep track of ship's previous move and regulate it so it would not repeat
    - The player that is being sent to module is not updated
    - Could save the previous weights of moves and then use rolling averages
    - Weightings for shipyard status don't work well
    - Since I am counting so much on shipyards: ease the process for it.
    - The main problem is that I am getting hit so easily
    - Probably should increase mining
    - write down the equations for each case to cancel each other out in a more meaningful way
    - If there was an enemy ship one move away from the shipyard, just spawn
    - There is a problem with the updating process, check this one <----
    - Maybe write another module that evaluates surroundings